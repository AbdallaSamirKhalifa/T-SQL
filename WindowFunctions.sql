





-- ASSIGN A UNIQE INTEGER TO EACH ROW WITHIN THE RESULT SET

SELECT *, ROW_NUMBER() OVER (ORDER BY Grade ASC) as RowNum FROM Students
ORDER BY Grade DESC


-- ASSIGN A RANK TO EACH ROW BASED ON THE VALUES IN THE SPECIFIED COLUMN

SELECT *, RANK() OVER (ORDER BY Grade ASC) as RowNum FROM Students
ORDER BY Grade DESC

SELECT *, RANK() OVER (ORDER BY Subject ASC) as RowNum FROM Students
ORDER BY Subject ASC

-- ASSIGN A RANK TO EACH ROW BASED ON THE VALUES IN THE SPECIFIED COLUMN

SELECT *,DENSE_RANK() OVER (ORDER BY performancerating DESC) as RowNum,ROW_NUMBER()  AS NUMBER FROM Employees2
ORDER BY PerformanceRating DESC

SELECT TOP 3 *,DENSE_RANK() OVER (PARTITION BY SUBJECT ORDER BY GRADE DESC) FROM STUDENTS
GROUP BY SUBJECT

--USING RANK FUNCTION WITH PARTITION BY
SELECT *, RANK() OVER(PARTITION BY SUBJECT ORDER BY GRADE DESC) AS GARADEPART FROM STUDENTS

-- USING AGGRAGATE FUNCTIONS WITH PARTITION BY

SELECT *, Department FROM 
(SELECT *,MAX(PERFORMANCERATING) OVER(PARTITION BY DEPARTMENT ORDER BY PERFORMANCERATING DESC) AS MAXPERFORMANCE FROM Employees2) TABLE2
WHERE PERFORMANCERATING = TABLE2.MAXPERFORMANCE

SELECT *FROM 
(SELECT *, MAX(GRADE) OVER(PARTITION BY SUBJECT ORDER BY GRADE DESC) AS MAXGRADE FROM STUDENTS
) TABLE2
WHERE GRADE = MAXGRADE
ORDER BY GRADE DESC

SELECT *,AVG(GRADE) OVER(PARTITION BY SUBJECT ) AS AVGGRADES 
		, SUM(GRADE) OVER(PARTITION BY SUBJECT ) AS SUMGRADES
		FROM STUDENTS


-- lag and lead

SELECT *,LAG(GRADE,1) OVER (ORDER BY GRADE DESC) AS PREVIOUS,
LEAD(GRADE,1) OVER (ORDER BY GRADE DESC) AS NEXT FROM STUDENTS
ORDER BY GRADE DESC


-- PAGING USING OFFSET AND FETCH NEXT


DECLARE @PAGENUMBER INT =1 , @ROWSPERPAGE INT =20

-- QUERY TO RETRIEVE DATA WITH PAGING
SELECT * FROM STUDENTS
--ORDER THE RESULTS 
ORDER BY STUDENTID
--CALCULATE THE NUMBER OF ROW TO SKIP (OFFSET) BASED ON THE CURRENT PAGE
OFFSET (@PAGENUMBER -1 ) * @ROWSPERPAGE ROWS
-- SPCIFY THE NUMBER OF ROWS TO FECT AFTER THE OFFSET
FETCH NEXT @ROWSPERPAGE ROWS ONLY







